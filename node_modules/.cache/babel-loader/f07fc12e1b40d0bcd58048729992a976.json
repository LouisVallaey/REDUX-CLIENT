{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louisvallaey/redux-client/src/containers/CustomerList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { GetCustomerList, AddCustomers, DeleteCustomers } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport CSVReader from \"react-csv-reader\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 0px auto 0px auto;\n`;\n_c = CustomerTable;\nconst FormikBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 40px auto 0px auto;\n  width: 80%;\n`;\n_c2 = FormikBox;\nconst CustomerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n`;\n_c3 = CustomerHeader;\nconst CsvBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 80%;\n  margin: 40px auto 0px auto;\n\n  p {\n    margin-right: 10px;\n  }\n`;\n_c4 = CsvBox;\nconst CustomerAddButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 80%;\n  margin: 40px auto 0px auto;\n  button {\n    cursor: pointer;\n    background-color: #1c7293;\n    color: white;\n    width: 100%;\n    height: 40px;\n    margin: 20px;\n    border: none;\n    border-radius: 5px;\n    outline: none;\n    &:hover {\n      background-color: #1f8db8;\n    }\n  }\n`;\n_c5 = CustomerAddButtons;\n\nconst CustomerList = () => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const customerList = useSelector(state => state.CustomerList);\n  const [addone, setaddone] = useState(false);\n  const [addmultiple, setaddmultiple] = useState(false);\n  const [deletecustomers, setdeletecustomer] = useState(false);\n  const parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: header => header.replace(/\\W/g, \"_\")\n  };\n\n  const handleCSV = async (data, fileInfo) => {\n    await dispatch(AddCustomers(data));\n    dispatch(GetCustomerList());\n  };\n\n  const handleCustomerClick = userid => {\n    history.push(\"/customer/\" + userid);\n  };\n\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomerList());\n  };\n\n  const deleteAllCustomers = async () => {\n    const ids = customerList.data.map(({\n      _id\n    }) => {\n      return _id;\n    });\n    dispatch(DeleteCustomers(ids));\n  };\n\n  const CustomerSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\n    lastName: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\n    email: Yup.string().email(\"Invalid email\").required(\"Required\")\n  });\n\n  const ShowData = () => {\n    if (!_.isEmpty(customerList.data)) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CustomerHeader, {\n          children: /*#__PURE__*/_jsxDEV(CustomerItem, {\n            _id: \"ID\",\n            firstName: \"firstName\",\n            lastName: \"lastName\",\n            email: \"email\",\n            customerSince: \"customerSince\"\n          }, \"header\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomerTable, {\n          children: customerList.data.map(({\n            _id,\n            firstName,\n            lastName,\n            email,\n            customerSince\n          }) => /*#__PURE__*/_jsxDEV(CustomerItem, {\n            handleCustomerClick: handleCustomerClick,\n            _id: _id,\n            firstName: firstName,\n            lastName: lastName,\n            email: email,\n            customerSince: customerSince\n          }, _id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (customerList.loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (customerList.errMsg !== \"\") {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: customerList.errMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No customers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!addmultiple && !addone && !deletecustomers && /*#__PURE__*/_jsxDEV(CustomerAddButtons, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setaddone(true),\n        children: \"Add Customer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setaddmultiple(true),\n        children: \"Add Customers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteAllCustomers,\n        children: \"Delete all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), addmultiple && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(CsvBox, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload .CSV file:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CSVReader, {\n          cssClass: \"csv-reader-input\",\n          onFileLoaded: handleCSV,\n          parserOptions: parseOptions,\n          inputId: \"csvId\",\n          inputStyle: {\n            color: \"black\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), addone && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(FormikBox, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\"\n          },\n          validationSchema: CustomerSchema,\n          onSubmit: async values => {\n            await dispatch(AddCustomers([{\n              firstName: values.firstName,\n              lastName: values.lastName,\n              email: values.email\n            }]));\n            dispatch(GetCustomerList());\n          },\n          children: ({\n            errors,\n            touched\n          }) => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"firstName\",\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"firstName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"lastName\",\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"lastName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"email\",\n              type: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), ShowData()]\n  }, void 0, true);\n};\n\n_s(CustomerList, \"yp84hWr+4lr7ktBeScZ5JIIcy4w=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c6 = CustomerList;\nexport default CustomerList;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"CustomerTable\");\n$RefreshReg$(_c2, \"FormikBox\");\n$RefreshReg$(_c3, \"CustomerHeader\");\n$RefreshReg$(_c4, \"CsvBox\");\n$RefreshReg$(_c5, \"CustomerAddButtons\");\n$RefreshReg$(_c6, \"CustomerList\");","map":{"version":3,"sources":["/Users/louisvallaey/redux-client/src/containers/CustomerList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","_","GetCustomerList","AddCustomers","DeleteCustomers","CustomerItem","CSVReader","Formik","Form","Field","Yup","styled","useHistory","CustomerTable","div","FormikBox","CustomerHeader","CsvBox","CustomerAddButtons","CustomerList","history","dispatch","customerList","state","addone","setaddone","addmultiple","setaddmultiple","deletecustomers","setdeletecustomer","parseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","handleCSV","data","fileInfo","handleCustomerClick","userid","push","FetchData","deleteAllCustomers","ids","map","_id","CustomerSchema","object","shape","firstName","string","min","max","required","lastName","email","ShowData","isEmpty","customerSince","loading","errMsg","color","values","errors","touched"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport {\n  GetCustomerList,\n  AddCustomers,\n  DeleteCustomers,\n} from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport CSVReader from \"react-csv-reader\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 0px auto 0px auto;\n`;\n\nconst FormikBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 40px auto 0px auto;\n  width: 80%;\n`;\n\nconst CustomerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n`;\n\nconst CsvBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 80%;\n  margin: 40px auto 0px auto;\n\n  p {\n    margin-right: 10px;\n  }\n`;\n\nconst CustomerAddButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 80%;\n  margin: 40px auto 0px auto;\n  button {\n    cursor: pointer;\n    background-color: #1c7293;\n    color: white;\n    width: 100%;\n    height: 40px;\n    margin: 20px;\n    border: none;\n    border-radius: 5px;\n    outline: none;\n    &:hover {\n      background-color: #1f8db8;\n    }\n  }\n`;\n\nconst CustomerList = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const customerList = useSelector((state) => state.CustomerList);\n\n  const [addone, setaddone] = useState(false);\n  const [addmultiple, setaddmultiple] = useState(false);\n  const [deletecustomers, setdeletecustomer] = useState(false);\n\n  const parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.replace(/\\W/g, \"_\"),\n  };\n\n  const handleCSV = async (data, fileInfo) => {\n    await dispatch(AddCustomers(data));\n    dispatch(GetCustomerList());\n  };\n\n  const handleCustomerClick = (userid) => {\n    history.push(\"/customer/\" + userid);\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomerList());\n  };\n\n  const deleteAllCustomers = async () => {\n    const ids = customerList.data.map(({ _id }) => {\n      return _id;\n    });\n    dispatch(DeleteCustomers(ids));\n  };\n\n  const CustomerSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    lastName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  });\n\n  const ShowData = () => {\n    if (!_.isEmpty(customerList.data)) {\n      return (\n        <>\n          <CustomerHeader>\n            <CustomerItem\n              key={\"header\"}\n              _id={\"ID\"}\n              firstName={\"firstName\"}\n              lastName={\"lastName\"}\n              email={\"email\"}\n              customerSince={\"customerSince\"}\n            ></CustomerItem>\n          </CustomerHeader>\n          <CustomerTable>\n            {customerList.data.map(\n              ({ _id, firstName, lastName, email, customerSince }) => (\n                <CustomerItem\n                  handleCustomerClick={handleCustomerClick}\n                  key={_id}\n                  _id={_id}\n                  firstName={firstName}\n                  lastName={lastName}\n                  email={email}\n                  customerSince={customerSince}\n                ></CustomerItem>\n              )\n            )}\n          </CustomerTable>\n        </>\n      );\n    }\n\n    if (customerList.loading) {\n      return <p>loading...</p>;\n    }\n    if (customerList.errMsg !== \"\") {\n      return <p>{customerList.errMsg}</p>;\n    }\n    return <p>No customers</p>;\n  };\n\n  return (\n    <>\n      {!addmultiple && !addone && !deletecustomers && (\n        <CustomerAddButtons>\n          <button onClick={() => setaddone(true)}>Add Customer</button>\n          <button onClick={() => setaddmultiple(true)}>Add Customers</button>\n          <button onClick={deleteAllCustomers}>Delete all</button>\n        </CustomerAddButtons>\n      )}\n\n      {addmultiple && (\n        <>\n          <CsvBox>\n            <p>Upload .CSV file:</p>\n            <CSVReader\n              cssClass=\"csv-reader-input\"\n              onFileLoaded={handleCSV}\n              parserOptions={parseOptions}\n              inputId=\"csvId\"\n              inputStyle={{ color: \"black\" }}\n            />\n          </CsvBox>\n        </>\n      )}\n      {addone && (\n        <>\n          <FormikBox>\n            <Formik\n              initialValues={{\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n              }}\n              validationSchema={CustomerSchema}\n              onSubmit={async (values) => {\n                await dispatch(\n                  AddCustomers([\n                    {\n                      firstName: values.firstName,\n                      lastName: values.lastName,\n                      email: values.email,\n                    },\n                  ])\n                );\n                dispatch(GetCustomerList());\n              }}\n            >\n              {({ errors, touched }) => (\n                <Form>\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <Field name=\"firstName\" />\n\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <Field name=\"lastName\" />\n\n                  <label htmlFor=\"email\">Email</label>\n                  <Field name=\"email\" type=\"email\" />\n\n                  <button type=\"submit\">Submit</button>\n                </Form>\n              )}\n            </Formik>\n          </FormikBox>\n        </>\n      )}\n      {ShowData()}\n    </>\n  );\n};\n\nexport default CustomerList;\n"]},"metadata":{},"sourceType":"module"}