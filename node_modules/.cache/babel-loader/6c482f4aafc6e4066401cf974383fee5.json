{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louisvallaey/redux-client/src/containers/CustomerPage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GetCustomer, UpdateCustomer } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport _ from \"lodash\";\nimport \"../App.css\";\nimport { Field, Form, Formik } from \"formik\";\nimport styled from \"styled-components\";\nconst FormikBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 40px auto 0px auto;\n  justify-content: center;\n`;\n_c = FormikBox;\n\nconst CustomerPage = props => {\n  _s();\n\n  const customerId = props.match.params.id;\n  const dispatch = useDispatch();\n  const customerItem = useSelector(state => state.CustomerItem);\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomer(customerId));\n  };\n\n  const ShowData = () => {\n    if (!_.isEmpty(customerItem.data[customerId])) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CustomerItem, {\n          _id: customerItem.data[customerId]._id,\n          firstName: customerItem.data[customerId].firstName,\n          lastName: customerItem.data[customerId].lastName,\n          email: customerItem.data[customerId].email,\n          customerSince: customerItem.data[customerId].customerSince\n        }, customerItem.data[customerId]._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormikBox, {\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              firstName: customerItem.data[customerId].firstName,\n              lastName: customerItem.data[customerId].lastName,\n              email: customerItem.data[customerId].email\n            },\n            onSubmit: async values => {\n              dispatch(UpdateCustomer(customerId, {\n                firstName: values.firstName,\n                lastName: values.lastName,\n                email: values.email\n              }));\n            },\n            children: /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"firstName\",\n                children: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                id: \"firstName\",\n                name: \"firstName\",\n                placeholder: \"Jane\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"lastName\",\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                id: \"lastName\",\n                name: \"lastName\",\n                placeholder: \"Doe\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                id: \"email\",\n                name: \"email\",\n                placeholder: \"jane@acme.com\",\n                type: \"email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (customerItem.loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (customerItem.errMsg !== \"\") {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: customerItem.errMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"unable get data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: ShowData()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CustomerPage, \"wuG0YGoJe7s4/lHeQxecIjaNpJ0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c2 = CustomerPage;\nexport default CustomerPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FormikBox\");\n$RefreshReg$(_c2, \"CustomerPage\");","map":{"version":3,"sources":["/Users/louisvallaey/redux-client/src/containers/CustomerPage.js"],"names":["useEffect","useDispatch","useSelector","GetCustomer","UpdateCustomer","CustomerItem","_","Field","Form","Formik","styled","FormikBox","div","CustomerPage","props","customerId","match","params","id","dispatch","customerItem","state","FetchData","ShowData","isEmpty","data","_id","firstName","lastName","email","customerSince","values","loading","errMsg"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GetCustomer, UpdateCustomer } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport _ from \"lodash\";\nimport \"../App.css\";\nimport { Field, Form, Formik } from \"formik\";\nimport styled from \"styled-components\";\n\nconst FormikBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 40px auto 0px auto;\n  justify-content: center;\n`;\nconst CustomerPage = (props) => {\n  const customerId = props.match.params.id;\n  const dispatch = useDispatch();\n  const customerItem = useSelector((state) => state.CustomerItem);\n\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomer(customerId));\n  };\n\n  const ShowData = () => {\n    if (!_.isEmpty(customerItem.data[customerId])) {\n      return (\n        <>\n          <CustomerItem\n            key={customerItem.data[customerId]._id}\n            _id={customerItem.data[customerId]._id}\n            firstName={customerItem.data[customerId].firstName}\n            lastName={customerItem.data[customerId].lastName}\n            email={customerItem.data[customerId].email}\n            customerSince={customerItem.data[customerId].customerSince}\n          ></CustomerItem>\n          <FormikBox>\n            <Formik\n              initialValues={{\n                firstName: customerItem.data[customerId].firstName,\n                lastName: customerItem.data[customerId].lastName,\n                email: customerItem.data[customerId].email,\n              }}\n              onSubmit={async (values) => {\n                dispatch(\n                  UpdateCustomer(customerId, {\n                    firstName: values.firstName,\n                    lastName: values.lastName,\n                    email: values.email,\n                  })\n                );\n              }}\n            >\n              <Form>\n                <label htmlFor=\"firstName\">First Name</label>\n                <Field id=\"firstName\" name=\"firstName\" placeholder=\"Jane\" />\n\n                <label htmlFor=\"lastName\">Last Name</label>\n                <Field id=\"lastName\" name=\"lastName\" placeholder=\"Doe\" />\n\n                <label htmlFor=\"email\">Email</label>\n                <Field\n                  id=\"email\"\n                  name=\"email\"\n                  placeholder=\"jane@acme.com\"\n                  type=\"email\"\n                />\n                <button type=\"submit\">Submit</button>\n              </Form>\n            </Formik>\n          </FormikBox>\n        </>\n      );\n    }\n\n    if (customerItem.loading) {\n      return <p>loading...</p>;\n    }\n    if (customerItem.errMsg !== \"\") {\n      return <p>{customerItem.errMsg}</p>;\n    }\n\n    return <p>unable get data</p>;\n  };\n\n  return <p>{ShowData()}</p>;\n};\n\nexport default CustomerPage;\n"]},"metadata":{},"sourceType":"module"}