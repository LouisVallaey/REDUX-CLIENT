{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louisvallaey/redux-client/src/containers/CustomerList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { GetCustomerList } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport styled from \"styled-components\";\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 0px auto 0px auto;\n`;\n_c = CustomerTable;\nconst CustomerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n`;\n_c2 = CustomerHeader;\n\nconst CustomerList = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const customerList = useSelector(state => state.CustomerList);\n\n  const handleCustomerClick = userid => {\n    history.push(\"/user\", {\n      id: userid\n    });\n  };\n\n  React.useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomerList);\n  };\n\n  const ShowData = () => {\n    if (_.isEmpty(customerList.data)) {\n      console.log(customerList.data);\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CustomerHeader, {\n          children: /*#__PURE__*/_jsxDEV(CustomerItem, {\n            id: \"ID\",\n            firstName: \"firstName\",\n            lastName: \"lastName\",\n            email: \"email\",\n            customerSince: \"customerSince\"\n          }, \"header\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomerTable, {\n          children: customerList.data.map(({\n            id,\n            firstName,\n            lastName,\n            email,\n            customerSince\n          }) => /*#__PURE__*/_jsxDEV(CustomerItem, {\n            handleCustomerClick: handleCustomerClick,\n            id: id,\n            firstName: firstName,\n            lastName: lastName,\n            email: email,\n            customerSince: customerSince\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (customerList.loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (customerList.errMsg !== \"\") {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: customerList.errMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"unable get data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: ShowData()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CustomerList, \"XXYfrzO0nkihawPbZ14wRbxbi+M=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c3 = CustomerList;\nexport default CustomerList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CustomerTable\");\n$RefreshReg$(_c2, \"CustomerHeader\");\n$RefreshReg$(_c3, \"CustomerList\");","map":{"version":3,"sources":["/Users/louisvallaey/redux-client/src/containers/CustomerList.js"],"names":["React","useDispatch","useSelector","_","GetCustomerList","CustomerItem","styled","CustomerTable","div","CustomerHeader","CustomerList","dispatch","customerList","state","handleCustomerClick","userid","history","push","id","useEffect","FetchData","ShowData","isEmpty","data","console","log","map","firstName","lastName","email","customerSince","loading","errMsg"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAI;AACjC;AACA;AACA;AACA;AACA,CALA;KAAMD,a;AAON,MAAME,cAAc,GAAGH,MAAM,CAACE,GAAI;AAClC;AACA;AACA;AACA;AACA,CALA;MAAMC,c;;AAON,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,YAAY,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACH,YAAlB,CAAhC;;AAEA,QAAMI,mBAAmB,GAAIC,MAAD,IAAY;AACtCC,IAAAA,OAAO,CAACC,IAAR,CAAa,OAAb,EAAsB;AAAEC,MAAAA,EAAE,EAAEH;AAAN,KAAtB;AACD,GAFD;;AAIAf,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpBC,IAAAA,SAAS;AACV,GAFD,EAEG,EAFH;;AAIA,QAAMA,SAAS,GAAG,MAAM;AACtBT,IAAAA,QAAQ,CAACP,eAAD,CAAR;AACD,GAFD;;AAGA,QAAMiB,QAAQ,GAAG,MAAM;AACrB,QAAIlB,CAAC,CAACmB,OAAF,CAAUV,YAAY,CAACW,IAAvB,CAAJ,EAAkC;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAYb,YAAY,CAACW,IAAzB;AACA,0BACE;AAAA,gCACE,QAAC,cAAD;AAAA,iCACE,QAAC,YAAD;AAEE,YAAA,EAAE,EAAE,IAFN;AAGE,YAAA,SAAS,EAAE,WAHb;AAIE,YAAA,QAAQ,EAAE,UAJZ;AAKE,YAAA,KAAK,EAAE,OALT;AAME,YAAA,aAAa,EAAE;AANjB,aACO,QADP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE,QAAC,aAAD;AAAA,oBACGX,YAAY,CAACW,IAAb,CAAkBG,GAAlB,CACC,CAAC;AAAER,YAAAA,EAAF;AAAMS,YAAAA,SAAN;AAAiBC,YAAAA,QAAjB;AAA2BC,YAAAA,KAA3B;AAAkCC,YAAAA;AAAlC,WAAD,kBACE,QAAC,YAAD;AACE,YAAA,mBAAmB,EAAEhB,mBADvB;AAGE,YAAA,EAAE,EAAEI,EAHN;AAIE,YAAA,SAAS,EAAES,SAJb;AAKE,YAAA,QAAQ,EAAEC,QALZ;AAME,YAAA,KAAK,EAAEC,KANT;AAOE,YAAA,aAAa,EAAEC;AAPjB,aAEOZ,EAFP;AAAA;AAAA;AAAA;AAAA,kBAFH;AADH;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA,sBADF;AA6BD;;AAED,QAAIN,YAAY,CAACmB,OAAjB,EAA0B;AACxB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,QAAInB,YAAY,CAACoB,MAAb,KAAwB,EAA5B,EAAgC;AAC9B,0BAAO;AAAA,kBAAIpB,YAAY,CAACoB;AAAjB;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GA1CD;;AA4CA,sBAAO;AAAA,cAAIX,QAAQ;AAAZ;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA5DD;;GAAMX,Y;UACaT,W,EACIC,W;;;MAFjBQ,Y;AA8DN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { GetCustomerList } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport styled from \"styled-components\";\n\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 0px auto 0px auto;\n`;\n\nconst CustomerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n`;\n\nconst CustomerList = () => {\n  const dispatch = useDispatch();\n  const customerList = useSelector((state) => state.CustomerList);\n\n  const handleCustomerClick = (userid) => {\n    history.push(\"/user\", { id: userid });\n  };\n\n  React.useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomerList);\n  };\n  const ShowData = () => {\n    if (_.isEmpty(customerList.data)) {\n      console.log(customerList.data);\n      return (\n        <>\n          <CustomerHeader>\n            <CustomerItem\n              key={\"header\"}\n              id={\"ID\"}\n              firstName={\"firstName\"}\n              lastName={\"lastName\"}\n              email={\"email\"}\n              customerSince={\"customerSince\"}\n            ></CustomerItem>\n          </CustomerHeader>\n          <CustomerTable>\n            {customerList.data.map(\n              ({ id, firstName, lastName, email, customerSince }) => (\n                <CustomerItem\n                  handleCustomerClick={handleCustomerClick}\n                  key={id}\n                  id={id}\n                  firstName={firstName}\n                  lastName={lastName}\n                  email={email}\n                  customerSince={customerSince}\n                ></CustomerItem>\n              )\n            )}\n          </CustomerTable>\n        </>\n      );\n    }\n\n    if (customerList.loading) {\n      return <p>loading...</p>;\n    }\n    if (customerList.errMsg !== \"\") {\n      return <p>{customerList.errMsg}</p>;\n    }\n\n    return <p>unable get data</p>;\n  };\n\n  return <p>{ShowData()}</p>;\n};\n\nexport default CustomerList;\n"]},"metadata":{},"sourceType":"module"}