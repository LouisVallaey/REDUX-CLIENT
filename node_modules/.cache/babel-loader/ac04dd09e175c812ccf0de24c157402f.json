{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/louisvallaey/redux-client/src/containers/CustomerList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { GetCustomerList, AddCustomers } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport CSVReader from \"react-csv-reader\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 0px auto 0px auto;\n`;\n_c = CustomerTable;\nconst CustomerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n`;\n_c2 = CustomerHeader;\nconst CsvBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 80%;\n  margin: 40px auto 0px auto;\n\n  p {\n    margin-right: 10px;\n  }\n`;\n_c3 = CsvBox;\nconst CustomerAddButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 80%;\n  margin: 40px auto 0px auto;\n  button {\n    cursor: pointer;\n    background-color: #1c7293;\n    color: white;\n    width: 100%;\n    height: 40px;\n    margin: 20px;\n    border: none;\n    border-radius: 5px;\n    outline: none;\n    &:hover {\n      background-color: #1f8db8;\n    }\n  }\n`;\n_c4 = CustomerAddButtons;\n\nconst CustomerList = () => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const customerList = useSelector(state => state.CustomerList);\n  const [addone, setaddone] = useState(false);\n  const [addmultiple, setaddmultiple] = useState(false);\n  const [deletecustomers, setdeletecustomer] = useState(false);\n  const parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: header => header.replace(/\\W/g, \"_\")\n  };\n\n  const handleCSV = async (data, fileInfo) => {};\n\n  const handleCustomerClick = userid => {\n    history.push(\"/customer/\" + userid);\n  };\n\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomerList());\n  };\n\n  const deleteAllCustomers = async () => {\n    const ids = customerList.data.map(({\n      id\n    }) => {\n      return id;\n    });\n  };\n\n  const CustomerSchema = Yup.object().shape({\n    firstName: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\n    lastName: Yup.string().min(2, \"Too Short!\").max(50, \"Too Long!\").required(\"Required\"),\n    email: Yup.string().email(\"Invalid email\").required(\"Required\")\n  });\n\n  const ShowData = () => {\n    if (!_.isEmpty(customerList.data)) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [!addmultiple && !addone && !deletecustomers && /*#__PURE__*/_jsxDEV(CustomerAddButtons, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setaddone(true),\n            children: \"Add Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setaddmultiple(true),\n            children: \"Add Customers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: deleteAllCustomers(),\n            children: \"Delete all\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), addmultiple && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(CsvBox, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Upload .CSV file:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CSVReader, {\n              cssClass: \"csv-reader-input\",\n              onFileLoaded: handleCSV,\n              parserOptions: parseOptions,\n              inputId: \"csvId\",\n              inputStyle: {\n                color: \"black\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)\n        }, void 0, false), addone && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              firstName: \"\",\n              lastName: \"\",\n              email: \"\"\n            },\n            validationSchema: CustomerSchema,\n            onSubmit: async values => {\n              await dispatch(AddCustomers([{\n                firstName: values.firstName,\n                lastName: values.lastName,\n                email: values.email\n              }]));\n              dispatch(GetCustomerList());\n            },\n            children: ({\n              errors,\n              touched\n            }) => /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"firstName\",\n                children: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: \"firstName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"lastName\",\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: \"lastName\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: \"email\",\n                type: \"email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(CustomerHeader, {\n          children: /*#__PURE__*/_jsxDEV(CustomerItem, {\n            _id: \"ID\",\n            firstName: \"firstName\",\n            lastName: \"lastName\",\n            email: \"email\",\n            customerSince: \"customerSince\"\n          }, \"header\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomerTable, {\n          children: customerList.data.map(({\n            _id,\n            firstName,\n            lastName,\n            email,\n            customerSince\n          }) => /*#__PURE__*/_jsxDEV(CustomerItem, {\n            handleCustomerClick: handleCustomerClick,\n            _id: _id,\n            firstName: firstName,\n            lastName: lastName,\n            email: email,\n            customerSince: customerSince\n          }, _id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    if (customerList.loading) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (customerList.errMsg !== \"\") {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: customerList.errMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"unable get data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: ShowData()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CustomerList, \"yp84hWr+4lr7ktBeScZ5JIIcy4w=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c5 = CustomerList;\nexport default CustomerList;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"CustomerTable\");\n$RefreshReg$(_c2, \"CustomerHeader\");\n$RefreshReg$(_c3, \"CsvBox\");\n$RefreshReg$(_c4, \"CustomerAddButtons\");\n$RefreshReg$(_c5, \"CustomerList\");","map":{"version":3,"sources":["/Users/louisvallaey/redux-client/src/containers/CustomerList.js"],"names":["React","useEffect","useState","useDispatch","useSelector","_","GetCustomerList","AddCustomers","CustomerItem","CSVReader","Formik","Form","Field","Yup","styled","useHistory","CustomerTable","div","CustomerHeader","CsvBox","CustomerAddButtons","CustomerList","history","dispatch","customerList","state","addone","setaddone","addmultiple","setaddmultiple","deletecustomers","setdeletecustomer","parseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","handleCSV","data","fileInfo","handleCustomerClick","userid","push","FetchData","deleteAllCustomers","ids","map","id","CustomerSchema","object","shape","firstName","string","min","max","required","lastName","email","ShowData","isEmpty","color","values","errors","touched","_id","customerSince","loading","errMsg"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { GetCustomerList, AddCustomers } from \"../actions/customerActions\";\nimport CustomerItem from \"../components/CustomerItem\";\nimport CSVReader from \"react-csv-reader\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst CustomerTable = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 0px auto 0px auto;\n`;\n\nconst CustomerHeader = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  margin: 40px auto 0px auto;\n`;\n\nconst CsvBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 80%;\n  margin: 40px auto 0px auto;\n\n  p {\n    margin-right: 10px;\n  }\n`;\n\nconst CustomerAddButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 80%;\n  margin: 40px auto 0px auto;\n  button {\n    cursor: pointer;\n    background-color: #1c7293;\n    color: white;\n    width: 100%;\n    height: 40px;\n    margin: 20px;\n    border: none;\n    border-radius: 5px;\n    outline: none;\n    &:hover {\n      background-color: #1f8db8;\n    }\n  }\n`;\n\nconst CustomerList = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const customerList = useSelector((state) => state.CustomerList);\n\n  const [addone, setaddone] = useState(false);\n  const [addmultiple, setaddmultiple] = useState(false);\n  const [deletecustomers, setdeletecustomer] = useState(false);\n\n  const parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.replace(/\\W/g, \"_\"),\n  };\n\n  const handleCSV = async (data, fileInfo) => {};\n\n  const handleCustomerClick = (userid) => {\n    history.push(\"/customer/\" + userid);\n  };\n  useEffect(() => {\n    FetchData();\n  }, []);\n\n  const FetchData = () => {\n    dispatch(GetCustomerList());\n  };\n\n  const deleteAllCustomers = async () => {\n    const ids = customerList.data.map(({ id }) => {\n      return id;\n    });\n  };\n\n  const CustomerSchema = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    lastName: Yup.string()\n      .min(2, \"Too Short!\")\n      .max(50, \"Too Long!\")\n      .required(\"Required\"),\n    email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  });\n\n  const ShowData = () => {\n    if (!_.isEmpty(customerList.data)) {\n      return (\n        <>\n          {!addmultiple && !addone && !deletecustomers && (\n            <CustomerAddButtons>\n              <button onClick={() => setaddone(true)}>Add Customer</button>\n              <button onClick={() => setaddmultiple(true)}>\n                Add Customers\n              </button>\n              <button onClick={deleteAllCustomers()}>Delete all</button>\n            </CustomerAddButtons>\n          )}\n\n          {addmultiple && (\n            <>\n              <CsvBox>\n                <p>Upload .CSV file:</p>\n                <CSVReader\n                  cssClass=\"csv-reader-input\"\n                  onFileLoaded={handleCSV}\n                  parserOptions={parseOptions}\n                  inputId=\"csvId\"\n                  inputStyle={{ color: \"black\" }}\n                />\n              </CsvBox>\n            </>\n          )}\n          {addone && (\n            <>\n              <Formik\n                initialValues={{\n                  firstName: \"\",\n                  lastName: \"\",\n                  email: \"\",\n                }}\n                validationSchema={CustomerSchema}\n                onSubmit={async (values) => {\n                  await dispatch(\n                    AddCustomers([\n                      {\n                        firstName: values.firstName,\n                        lastName: values.lastName,\n                        email: values.email,\n                      },\n                    ])\n                  );\n                  dispatch(GetCustomerList());\n                }}\n              >\n                {({ errors, touched }) => (\n                  <Form>\n                    <label htmlFor=\"firstName\">First Name</label>\n                    <Field name=\"firstName\" />\n\n                    <label htmlFor=\"lastName\">Last Name</label>\n                    <Field name=\"lastName\" />\n\n                    <label htmlFor=\"email\">Email</label>\n                    <Field name=\"email\" type=\"email\" />\n\n                    <button type=\"submit\">Submit</button>\n                  </Form>\n                )}\n              </Formik>\n            </>\n          )}\n\n          <CustomerHeader>\n            <CustomerItem\n              key={\"header\"}\n              _id={\"ID\"}\n              firstName={\"firstName\"}\n              lastName={\"lastName\"}\n              email={\"email\"}\n              customerSince={\"customerSince\"}\n            ></CustomerItem>\n          </CustomerHeader>\n          <CustomerTable>\n            {customerList.data.map(\n              ({ _id, firstName, lastName, email, customerSince }) => (\n                <CustomerItem\n                  handleCustomerClick={handleCustomerClick}\n                  key={_id}\n                  _id={_id}\n                  firstName={firstName}\n                  lastName={lastName}\n                  email={email}\n                  customerSince={customerSince}\n                ></CustomerItem>\n              )\n            )}\n          </CustomerTable>\n        </>\n      );\n    }\n\n    if (customerList.loading) {\n      return <p>loading...</p>;\n    }\n    if (customerList.errMsg !== \"\") {\n      return <p>{customerList.errMsg}</p>;\n    }\n    return <p>unable get data</p>;\n  };\n\n  return <p>{ShowData()}</p>;\n};\n\nexport default CustomerList;\n"]},"metadata":{},"sourceType":"module"}